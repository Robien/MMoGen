// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Connection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Connection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Connection {

namespace {

const ::google::protobuf::Descriptor* MessageClientType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageClientType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageClientType_messageClientType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageServerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageServerType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageServerType_messageServerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MM_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MM_MMCommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ACKMM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKMM_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ready_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Connection_2eproto() {
  protobuf_AddDesc_Connection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Connection.proto");
  GOOGLE_CHECK(file != NULL);
  MessageClientType_descriptor_ = file->message_type(0);
  static const int MessageClientType_offsets_[1] = {
  };
  MessageClientType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageClientType_descriptor_,
      MessageClientType::default_instance_,
      MessageClientType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageClientType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageClientType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageClientType));
  MessageClientType_messageClientType_descriptor_ = MessageClientType_descriptor_->enum_type(0);
  MessageServerType_descriptor_ = file->message_type(1);
  static const int MessageServerType_offsets_[1] = {
  };
  MessageServerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageServerType_descriptor_,
      MessageServerType::default_instance_,
      MessageServerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageServerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageServerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageServerType));
  MessageServerType_messageServerType_descriptor_ = MessageServerType_descriptor_->enum_type(0);
  MM_descriptor_ = file->message_type(2);
  static const int MM_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MM, versionmajor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MM, versionminor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MM, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MM, elo_),
  };
  MM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MM_descriptor_,
      MM::default_instance_,
      MM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MM));
  MM_MMCommandType_descriptor_ = MM_descriptor_->enum_type(0);
  ACKMM_descriptor_ = file->message_type(3);
  static const int ACKMM_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMM, isok_),
  };
  ACKMM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKMM_descriptor_,
      ACKMM::default_instance_,
      ACKMM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKMM));
  MatchFound_descriptor_ = file->message_type(4);
  static const int MatchFound_offsets_[1] = {
  };
  MatchFound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchFound_descriptor_,
      MatchFound::default_instance_,
      MatchFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchFound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchFound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchFound));
  Ready_descriptor_ = file->message_type(5);
  static const int Ready_offsets_[1] = {
  };
  Ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ready_descriptor_,
      Ready::default_instance_,
      Ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ready));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Connection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageClientType_descriptor_, &MessageClientType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageServerType_descriptor_, &MessageServerType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MM_descriptor_, &MM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKMM_descriptor_, &ACKMM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchFound_descriptor_, &MatchFound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ready_descriptor_, &Ready::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Connection_2eproto() {
  delete MessageClientType::default_instance_;
  delete MessageClientType_reflection_;
  delete MessageServerType::default_instance_;
  delete MessageServerType_reflection_;
  delete MM::default_instance_;
  delete MM_reflection_;
  delete ACKMM::default_instance_;
  delete ACKMM_reflection_;
  delete MatchFound::default_instance_;
  delete MatchFound_reflection_;
  delete Ready::default_instance_;
  delete Ready_reflection_;
}

void protobuf_AddDesc_Connection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Connection.proto\022\nConnection\";\n\021Messag"
    "eClientType\"&\n\021messageClientType\022\006\n\002MM\020\000"
    "\022\t\n\005Ready\020\001\"C\n\021MessageServerType\".\n\021mess"
    "ageServerType\022\t\n\005ACKMM\020\000\022\016\n\nMatchFound\020\001"
    "\"\234\001\n\002MM\022\024\n\014versionMajor\030\001 \002(\005\022\024\n\014version"
    "Minor\030\002 \002(\005\0224\n\007command\030\003 \001(\0162\034.Connectio"
    "n.MM.MMCommandType:\005START\022\016\n\003Elo\030\004 \001(\005:\001"
    "0\"$\n\rMMCommandType\022\t\n\005START\020\000\022\010\n\004STOP\020\001\""
    "\025\n\005ACKMM\022\014\n\004isOk\030\001 \002(\010\"\014\n\nMatchFound\"\007\n\005"
    "Ready", 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Connection.proto", &protobuf_RegisterTypes);
  MessageClientType::default_instance_ = new MessageClientType();
  MessageServerType::default_instance_ = new MessageServerType();
  MM::default_instance_ = new MM();
  ACKMM::default_instance_ = new ACKMM();
  MatchFound::default_instance_ = new MatchFound();
  Ready::default_instance_ = new Ready();
  MessageClientType::default_instance_->InitAsDefaultInstance();
  MessageServerType::default_instance_->InitAsDefaultInstance();
  MM::default_instance_->InitAsDefaultInstance();
  ACKMM::default_instance_->InitAsDefaultInstance();
  MatchFound::default_instance_->InitAsDefaultInstance();
  Ready::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Connection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Connection_2eproto {
  StaticDescriptorInitializer_Connection_2eproto() {
    protobuf_AddDesc_Connection_2eproto();
  }
} static_descriptor_initializer_Connection_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageClientType_messageClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageClientType_messageClientType_descriptor_;
}
bool MessageClientType_messageClientType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageClientType_messageClientType MessageClientType::MM;
const MessageClientType_messageClientType MessageClientType::Ready;
const MessageClientType_messageClientType MessageClientType::messageClientType_MIN;
const MessageClientType_messageClientType MessageClientType::messageClientType_MAX;
const int MessageClientType::messageClientType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageClientType::MessageClientType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Connection.MessageClientType)
}

void MessageClientType::InitAsDefaultInstance() {
}

MessageClientType::MessageClientType(const MessageClientType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Connection.MessageClientType)
}

void MessageClientType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageClientType::~MessageClientType() {
  // @@protoc_insertion_point(destructor:Connection.MessageClientType)
  SharedDtor();
}

void MessageClientType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageClientType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageClientType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageClientType_descriptor_;
}

const MessageClientType& MessageClientType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Connection_2eproto();
  return *default_instance_;
}

MessageClientType* MessageClientType::default_instance_ = NULL;

MessageClientType* MessageClientType::New() const {
  return new MessageClientType;
}

void MessageClientType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageClientType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Connection.MessageClientType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Connection.MessageClientType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Connection.MessageClientType)
  return false;
#undef DO_
}

void MessageClientType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Connection.MessageClientType)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Connection.MessageClientType)
}

::google::protobuf::uint8* MessageClientType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Connection.MessageClientType)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Connection.MessageClientType)
  return target;
}

int MessageClientType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageClientType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageClientType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageClientType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageClientType::MergeFrom(const MessageClientType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageClientType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageClientType::CopyFrom(const MessageClientType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageClientType::IsInitialized() const {

  return true;
}

void MessageClientType::Swap(MessageClientType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageClientType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageClientType_descriptor_;
  metadata.reflection = MessageClientType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageServerType_messageServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageServerType_messageServerType_descriptor_;
}
bool MessageServerType_messageServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageServerType_messageServerType MessageServerType::ACKMM;
const MessageServerType_messageServerType MessageServerType::MatchFound;
const MessageServerType_messageServerType MessageServerType::messageServerType_MIN;
const MessageServerType_messageServerType MessageServerType::messageServerType_MAX;
const int MessageServerType::messageServerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageServerType::MessageServerType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Connection.MessageServerType)
}

void MessageServerType::InitAsDefaultInstance() {
}

MessageServerType::MessageServerType(const MessageServerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Connection.MessageServerType)
}

void MessageServerType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageServerType::~MessageServerType() {
  // @@protoc_insertion_point(destructor:Connection.MessageServerType)
  SharedDtor();
}

void MessageServerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageServerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageServerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageServerType_descriptor_;
}

const MessageServerType& MessageServerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Connection_2eproto();
  return *default_instance_;
}

MessageServerType* MessageServerType::default_instance_ = NULL;

MessageServerType* MessageServerType::New() const {
  return new MessageServerType;
}

void MessageServerType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageServerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Connection.MessageServerType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Connection.MessageServerType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Connection.MessageServerType)
  return false;
#undef DO_
}

void MessageServerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Connection.MessageServerType)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Connection.MessageServerType)
}

::google::protobuf::uint8* MessageServerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Connection.MessageServerType)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Connection.MessageServerType)
  return target;
}

int MessageServerType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageServerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageServerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageServerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageServerType::MergeFrom(const MessageServerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageServerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageServerType::CopyFrom(const MessageServerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageServerType::IsInitialized() const {

  return true;
}

void MessageServerType::Swap(MessageServerType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageServerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageServerType_descriptor_;
  metadata.reflection = MessageServerType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MM_MMCommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MM_MMCommandType_descriptor_;
}
bool MM_MMCommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MM_MMCommandType MM::START;
const MM_MMCommandType MM::STOP;
const MM_MMCommandType MM::MMCommandType_MIN;
const MM_MMCommandType MM::MMCommandType_MAX;
const int MM::MMCommandType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MM::kVersionMajorFieldNumber;
const int MM::kVersionMinorFieldNumber;
const int MM::kCommandFieldNumber;
const int MM::kEloFieldNumber;
#endif  // !_MSC_VER

MM::MM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Connection.MM)
}

void MM::InitAsDefaultInstance() {
}

MM::MM(const MM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Connection.MM)
}

void MM::SharedCtor() {
  _cached_size_ = 0;
  versionmajor_ = 0;
  versionminor_ = 0;
  command_ = 0;
  elo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MM::~MM() {
  // @@protoc_insertion_point(destructor:Connection.MM)
  SharedDtor();
}

void MM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MM_descriptor_;
}

const MM& MM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Connection_2eproto();
  return *default_instance_;
}

MM* MM::default_instance_ = NULL;

MM* MM::New() const {
  return new MM;
}

void MM::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MM*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(versionmajor_, elo_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Connection.MM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 versionMajor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versionmajor_)));
          set_has_versionmajor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_versionMinor;
        break;
      }

      // required int32 versionMinor = 2;
      case 2: {
        if (tag == 16) {
         parse_versionMinor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versionminor_)));
          set_has_versionminor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_command;
        break;
      }

      // optional .Connection.MM.MMCommandType command = 3 [default = START];
      case 3: {
        if (tag == 24) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Connection::MM_MMCommandType_IsValid(value)) {
            set_command(static_cast< ::Connection::MM_MMCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Elo;
        break;
      }

      // optional int32 Elo = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_Elo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elo_)));
          set_has_elo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Connection.MM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Connection.MM)
  return false;
#undef DO_
}

void MM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Connection.MM)
  // required int32 versionMajor = 1;
  if (has_versionmajor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->versionmajor(), output);
  }

  // required int32 versionMinor = 2;
  if (has_versionminor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->versionminor(), output);
  }

  // optional .Connection.MM.MMCommandType command = 3 [default = START];
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->command(), output);
  }

  // optional int32 Elo = 4 [default = 0];
  if (has_elo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->elo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Connection.MM)
}

::google::protobuf::uint8* MM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Connection.MM)
  // required int32 versionMajor = 1;
  if (has_versionmajor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->versionmajor(), target);
  }

  // required int32 versionMinor = 2;
  if (has_versionminor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->versionminor(), target);
  }

  // optional .Connection.MM.MMCommandType command = 3 [default = START];
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->command(), target);
  }

  // optional int32 Elo = 4 [default = 0];
  if (has_elo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->elo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Connection.MM)
  return target;
}

int MM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 versionMajor = 1;
    if (has_versionmajor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versionmajor());
    }

    // required int32 versionMinor = 2;
    if (has_versionminor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versionminor());
    }

    // optional .Connection.MM.MMCommandType command = 3 [default = START];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional int32 Elo = 4 [default = 0];
    if (has_elo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MM::MergeFrom(const MM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_versionmajor()) {
      set_versionmajor(from.versionmajor());
    }
    if (from.has_versionminor()) {
      set_versionminor(from.versionminor());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_elo()) {
      set_elo(from.elo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MM::CopyFrom(const MM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MM::Swap(MM* other) {
  if (other != this) {
    std::swap(versionmajor_, other->versionmajor_);
    std::swap(versionminor_, other->versionminor_);
    std::swap(command_, other->command_);
    std::swap(elo_, other->elo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MM_descriptor_;
  metadata.reflection = MM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKMM::kIsOkFieldNumber;
#endif  // !_MSC_VER

ACKMM::ACKMM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Connection.ACKMM)
}

void ACKMM::InitAsDefaultInstance() {
}

ACKMM::ACKMM(const ACKMM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Connection.ACKMM)
}

void ACKMM::SharedCtor() {
  _cached_size_ = 0;
  isok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKMM::~ACKMM() {
  // @@protoc_insertion_point(destructor:Connection.ACKMM)
  SharedDtor();
}

void ACKMM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKMM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKMM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKMM_descriptor_;
}

const ACKMM& ACKMM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Connection_2eproto();
  return *default_instance_;
}

ACKMM* ACKMM::default_instance_ = NULL;

ACKMM* ACKMM::New() const {
  return new ACKMM;
}

void ACKMM::Clear() {
  isok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKMM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Connection.ACKMM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isOk = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Connection.ACKMM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Connection.ACKMM)
  return false;
#undef DO_
}

void ACKMM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Connection.ACKMM)
  // required bool isOk = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Connection.ACKMM)
}

::google::protobuf::uint8* ACKMM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Connection.ACKMM)
  // required bool isOk = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Connection.ACKMM)
  return target;
}

int ACKMM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isOk = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKMM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKMM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKMM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKMM::MergeFrom(const ACKMM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKMM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKMM::CopyFrom(const ACKMM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKMM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKMM::Swap(ACKMM* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKMM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKMM_descriptor_;
  metadata.reflection = ACKMM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchFound::MatchFound()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Connection.MatchFound)
}

void MatchFound::InitAsDefaultInstance() {
}

MatchFound::MatchFound(const MatchFound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Connection.MatchFound)
}

void MatchFound::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchFound::~MatchFound() {
  // @@protoc_insertion_point(destructor:Connection.MatchFound)
  SharedDtor();
}

void MatchFound::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchFound_descriptor_;
}

const MatchFound& MatchFound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Connection_2eproto();
  return *default_instance_;
}

MatchFound* MatchFound::default_instance_ = NULL;

MatchFound* MatchFound::New() const {
  return new MatchFound;
}

void MatchFound::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Connection.MatchFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Connection.MatchFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Connection.MatchFound)
  return false;
#undef DO_
}

void MatchFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Connection.MatchFound)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Connection.MatchFound)
}

::google::protobuf::uint8* MatchFound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Connection.MatchFound)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Connection.MatchFound)
  return target;
}

int MatchFound::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchFound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchFound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchFound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchFound::MergeFrom(const MatchFound& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchFound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchFound::CopyFrom(const MatchFound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchFound::IsInitialized() const {

  return true;
}

void MatchFound::Swap(MatchFound* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchFound_descriptor_;
  metadata.reflection = MatchFound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ready::Ready()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Connection.Ready)
}

void Ready::InitAsDefaultInstance() {
}

Ready::Ready(const Ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Connection.Ready)
}

void Ready::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ready::~Ready() {
  // @@protoc_insertion_point(destructor:Connection.Ready)
  SharedDtor();
}

void Ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ready_descriptor_;
}

const Ready& Ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Connection_2eproto();
  return *default_instance_;
}

Ready* Ready::default_instance_ = NULL;

Ready* Ready::New() const {
  return new Ready;
}

void Ready::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Connection.Ready)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Connection.Ready)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Connection.Ready)
  return false;
#undef DO_
}

void Ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Connection.Ready)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Connection.Ready)
}

::google::protobuf::uint8* Ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Connection.Ready)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Connection.Ready)
  return target;
}

int Ready::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ready::MergeFrom(const Ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ready::CopyFrom(const Ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ready::IsInitialized() const {

  return true;
}

void Ready::Swap(Ready* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ready_descriptor_;
  metadata.reflection = Ready_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Connection

// @@protoc_insertion_point(global_scope)
